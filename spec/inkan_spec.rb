require File.expand_path(File.dirname(__FILE__) + '/spec_helper')

describe "Inkan" do
  describe '.legitimate?' do
    let(:content) { 'foo bar baz' }
    
    it "returns true if the file contents match the SHA" do
      open('/tmp/spec.txt', 'w') do |file|
        file.puts "# Generated by Inkan: #{Digest::SHA1.hexdigest(content)}"
        file.print content
      end
      
      Inkan.legitimate?('/tmp/spec.txt').should be_true
    end
    
    it "returns false if the file contents don't match the SHA" do
      open('/tmp/spec.txt', 'w') do |file|
        file.puts "# Generated by Inkan: #{Digest::SHA1.hexdigest(content)}"
        file.puts content
      end
      
      Inkan.legitimate?('/tmp/spec.txt').should be_false
    end
    
    it "returns false if there is no SHA" do
      open('/tmp/spec.txt', 'w') do |file|
        file.print content
      end
      
      Inkan.legitimate?('/tmp/spec.txt').should be_false
    end
  end
  
  describe '.seal' do
    it "should write the file after closing the block" do
      Inkan.seal('/tmp/spec.txt') do |inkan|
        inkan.print 'foo bar baz'
      end
      
      contents = open('/tmp/spec.txt').read
      contents.should match(/foo bar baz$/)
      contents.should match(/^# Generated by Inkan/)
    end
  end
  
  describe '#seal' do
    let(:inkan) { Inkan.new('/tmp/spec.txt') }
    
    it "writes out the contents of the buffer" do
      inkan.print "foo bar baz"
      inkan.seal
      
      open('/tmp/spec.txt').read.should match(/foo bar baz$/)
    end
    
    it "adds the credit line to the top of the file" do
      inkan.print "foo bar baz"
      inkan.seal
      
      open('/tmp/spec.txt').read.should match(/^# Generated by Inkan/)
    end
    
    it "adds the SHA to the top of the file" do
      inkan.print "foo bar baz"
      inkan.seal
      
      sha = Digest::SHA1.hexdigest("foo bar baz")
      
      open('/tmp/spec.txt').read.should match(/#{sha}/)
    end
  end
  
  describe '#puts' do
    let(:inkan) { Inkan.new('/tmp/spec.txt') }
    
    it "adds an extra new line to the output" do
      inkan.puts "foo bar baz"
      inkan.seal
      
      open('/tmp/spec.txt').read.should match(/foo bar baz\n$/)
    end
  end
  
  describe '#credit' do
    let(:inkan) { Inkan.new('/tmp/spec.txt') }
    
    it "defaults to 'Generated by Inkan'" do
      inkan.credit.should == 'Generated by Inkan'
    end
    
    it "should pass through changes to the file comment" do
      inkan.credit = "Pat's Magic Code"
      inkan.print "foo bar baz"
      inkan.seal
      
      open('/tmp/spec.txt').read.should match(/^# Pat's Magic Code/)
    end
  end
  
  describe '#comment_prefix' do
    let(:inkan) { Inkan.new('/tmp/spec.txt') }
    
    it "defaults to a hash symbol" do
      inkan.comment_prefix.should == '#'
    end
    
    it "should pass through changes to the file credit" do
      inkan.comment_prefix = "//"
      inkan.print "foo bar baz"
      inkan.seal
      
      open('/tmp/spec.txt').read.should match(/^\/\/ Generated by Inkan/)
    end
  end
  
  describe '#comment_suffix' do
    let(:inkan) { Inkan.new('/tmp/spec.txt') }
    
    it "defaults to a blank string" do
      inkan.comment_suffix.should == ''
    end
    
    it "should pass through changes to the file comment" do
      inkan.comment_suffix = "*/"
      inkan.print "foo bar baz"
      inkan.seal
      
      open('/tmp/spec.txt').read.should match(/\*\/\n/)
    end
  end
end
