require "spec_helper"

RSpec.describe "Inkan" do
  describe '.legitimate?' do
    let(:content) { 'foo bar baz' }

    it "returns true if the file contents match the SHA" do
      open('/tmp/spec.txt', 'w') do |file|
        file.puts "# Generated by Inkan: #{Digest::SHA1.hexdigest(content)}"
        file.print content
      end

      expect(Inkan.legitimate?('/tmp/spec.txt')).to eq(true)
    end

    it "returns false if the file contents don't match the SHA" do
      open('/tmp/spec.txt', 'w') do |file|
        file.puts "# Generated by Inkan: #{Digest::SHA1.hexdigest(content)}"
        file.puts content
      end

      expect(Inkan.legitimate?('/tmp/spec.txt')).to eq(false)
    end

    it "returns false if there is no SHA" do
      open('/tmp/spec.txt', 'w') do |file|
        file.print content
      end

      expect(Inkan.legitimate?('/tmp/spec.txt')).to eq(false)
    end
  end

  describe '.seal' do
    it "should write the file after closing the block" do
      Inkan.seal('/tmp/spec.txt') do |inkan|
        inkan.print 'foo bar baz'
      end

      contents = open('/tmp/spec.txt').read
      expect(contents).to match(/foo bar baz$/)
      expect(contents).to match(/^# Generated by Inkan/)
    end
  end

  describe '#seal' do
    let(:inkan) { Inkan.new('/tmp/spec.txt') }

    it "writes out the contents of the buffer" do
      inkan.print "foo bar baz"
      inkan.seal

      expect(open('/tmp/spec.txt').read).to match(/foo bar baz$/)
    end

    it "adds the credit line to the top of the file" do
      inkan.print "foo bar baz"
      inkan.seal

      expect(open('/tmp/spec.txt').read).to match(/^# Generated by Inkan/)
    end

    it "adds the SHA to the top of the file" do
      inkan.print "foo bar baz"
      inkan.seal

      sha = Digest::SHA1.hexdigest("foo bar baz")

      expect(open('/tmp/spec.txt').read).to match(/#{sha}/)
    end
  end

  describe '#puts' do
    let(:inkan) { Inkan.new('/tmp/spec.txt') }

    it "adds an extra new line to the output" do
      inkan.puts "foo bar baz"
      inkan.seal

      expect(open('/tmp/spec.txt').read).to match(/foo bar baz\n$/)
    end
  end

  describe '#credit' do
    let(:inkan) { Inkan.new('/tmp/spec.txt') }

    it "defaults to 'Generated by Inkan'" do
      expect(inkan.credit).to eq('Generated by Inkan')
    end

    it "should pass through changes to the file comment" do
      inkan.credit = "Pat's Magic Code"
      inkan.print "foo bar baz"
      inkan.seal

      expect(open('/tmp/spec.txt').read).to match(/^# Pat's Magic Code/)
    end
  end

  describe '#comment_prefix' do
    let(:inkan) { Inkan.new('/tmp/spec.txt') }

    it "defaults to a hash symbol" do
      expect(inkan.comment_prefix).to eq('#')
    end

    it "should pass through changes to the file credit" do
      inkan.comment_prefix = "//"
      inkan.print "foo bar baz"
      inkan.seal

      expect(open('/tmp/spec.txt').read).to match(/^\/\/ Generated by Inkan/)
    end
  end

  describe '#comment_suffix' do
    let(:inkan) { Inkan.new('/tmp/spec.txt') }

    it "defaults to a blank string" do
      expect(inkan.comment_suffix).to eq('')
    end

    it "should pass through changes to the file comment" do
      inkan.comment_suffix = "*/"
      inkan.print "foo bar baz"
      inkan.seal

      expect(open('/tmp/spec.txt').read).to match(/\*\/\n/)
    end
  end
end
